% Calculate and arrange related spike rate and blink amplitude data.
% (c) Si-yang Yu @ PSI 2018

% Function input:  cell_spk, defined as an array of struct (2 fields, defined below), generated by 'import_jrc_csv.m'
%                              nr: the cell number, 0 means noise channel
%                              t:  the spike timings
%                  blk_data, defined as an array of struct (7 fields, defined below), generated ny 'blk_detn.m'
%                              tr:     baseline adjusted eyeblink trace
%                              t:      session timestamps
%                              cr_on:  CR onset time
%                              cr_pk:  CR peak time
%                              cr_amp: CR peak amplitude
%                              ur_pk:  UR peak time
%                              ur_amp: UR peak amplitude
%                  stm_lc,   defined as an array of struct (2 fields, defined below), generated by 'locs_vfy.m'
%                              nr: the trial number
%                              t:  the tirgger timing
%                  t_pre,    pre-stimultion time to be analyzed (ms)
%                  t_post,   post-stimultion time to be analyzed (ms)
%                  n_bin,    number of bins defined to calculate SRx
% Function output: blk_spk,  defined as an array of struct (7 fields, defined below)
%                              cell:  the cell number of PSTH
%                              sr_0:  spike rate in the duration of 't_pre' before trigger
%                              sr_x:  array of spike rate in the bins inside duration of 't_post' after trigger
%                              amp_0: avarage of UR amplitude in the session
%                              amp_x: array of blink amplitude in the bins inside duration of 't_post' after trigger
%                              val_x: defined as "sr_x - sr_0"
%                              val_y: defined as "amp_x / amp_0"

function blk_spk = blk_spk_calc(cell_spk,blk_data,stm_lc,t_pre,t_post,n_bin)
    t_pre = t_pre / 1000;
    t_post = t_post / 1000;
    delta = t_post / n_bin;
    amp_0 = mean([blk_data.ur_amp]);
    blk_spk(size(cell_spk,2) - 1) = struct('cell',[],'sr_0',[],'sr_x',[],'amp_0',[],'amp_x',[],'val_x',[],'val_y',[]);
  % 1st loop for all cells
    i = 2;
    while i <= size(cell_spk,2)
        sr_0 = zeros(1,size(stm_lc,2));
        sr_x = zeros(size(stm_lc,2),n_bin);
        amp_x = zeros(size(stm_lc,2),n_bin);
      % 2nd loop for all triggers
        j = 1;
        while j <= size(stm_lc,2)
            idx_0 = (cell_spk(i).t >= stm_lc(j).t - t_pre) & (cell_spk(i).t < stm_lc(j).t);
            sr_0(j) = sum(idx_0) / t_pre;
          % 3rd loop for all bins
            k = 1;
            while k <= n_bin
              % Processing spike rate in bins
                idx_x = (cell_spk(i).t >= stm_lc(j).t + (k - 1) * delta) & (cell_spk(i).t < stm_lc(j).t + k * delta);
                sr_x(j,k) = sum(idx_x) / delta;
              % Processing eye blink amplitude in bins
                idx_x = (blk_data(stm_lc(j).nr).t >= stm_lc(j).t + (k - 1) * delta) & (blk_data(stm_lc(j).nr).t < stm_lc(j).t + k * delta);
                amp_x(j,k) = mean(blk_data(stm_lc(j).nr).tr(idx_x));
                k = k + 1;
            end
            j = j + 1;
        end
      % Arranging data
        blk_spk(i-1).cell = i - 1;
        blk_spk(i-1).sr_0 = mean(sr_0);
        blk_spk(i-1).sr_x = mean(sr_x);
        blk_spk(i-1).amp_0 = amp_0;
        blk_spk(i-1).amp_x = mean(amp_x);
        blk_spk(i-1).val_x = blk_spk(i-1).sr_x - blk_spk(i-1).sr_0;
        blk_spk(i-1).val_y = blk_spk(i-1).amp_x / amp_0;
        i = i + 1;
    end
end