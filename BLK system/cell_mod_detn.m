% Identifying cell modulation response types to trigger, revised version 2.5.
% (c) Si-yang Yu @ PSI 2018

% Function input:  psth,     defined as an array of struct (2 fields, defined below), generated by 'psth_calc.m'
%                              cell:  the cell number of PSTH
%                              bar:   the PSTH bar information, defined as an array of struct (3 fields, defined below)
%                                       bin:  the number of PSTH bar
%                                       h:    the hight of PSTH bar
%                                       t:    the represented time of bar
%                  t_base,   pre-stimultion time range (array of 2 elements) to be analyzed for baseline (ms)
%                  t_mod,    post-stimultion time range (array of 2 elements) to be analyzed for mod type (ms)
%                  t_on,     post-stimultion time range (array of 2 elements) to be analyzed for onset timing (ms)
% Function output: cell_mod, defined as an array of struct (5 fields, defined below)
%                              cell:  the cell number of PSTH
%                              stat:  the baseline statistical info, defined as an array of struct (4 fields, defined below)
%                                       avg:  the mean value of baseline
%                                       std:  the standard deviation of baseline
%                                       th_l: lower threshold, avg - 3 * std
%                                       th_h: higher threshold, avg + 3 * std
%                              k:     slope of least-squares linear fit in t_mod range
%                              type:  cell modulation type, freq > th_h -> 'FAC', freq < th_l -> 'SUP', ELSE -> 'NOM'
%                              onset: first timestamp in t_mod range that passes th

function cell_mod = cell_mod_detn(psth,t_base,t_mod,t_on)
if ~isempty([psth.cell])
  % Converting time parameters (ms) to s
    t_base = t_base / 1000;
    t_mod = t_mod / 1000;
    t_on = t_on / 1000;
  % Processing loop 
    cell_mod(size(psth,2)) = struct('cell',[],'stat',[],'k',[],'type',[],'onset',[]);
    for i = 1:size(psth,2)
        cell_mod(i).cell = i;
      % Extract data from PSTH
        nr = [psth(i).bar.bin];
        freq = [psth(i).bar.h];
        t = [psth(i).bar.t];
      % Process linear regression on PSTH spike rate in defined t_mod range
        idx_mod = t > t_mod(1) & t <= t_mod(2);
        p = polyfit(nr(idx_mod),freq(idx_mod),1);
        k = p(1);
        cell_mod(i).k = k;
      % Process baseline statistics
        idx_base = t > t_base(1) & t <= t_base(2);
        stat.avg = mean(freq(idx_base));
        stat.std = std(freq(idx_base));
        stat.th_l = stat.avg - 3 * stat.std; %3 or 6
        stat.th_h = stat.avg + 3 * stat.std;
        cell_mod(i).stat = stat;
      % Get onset range
        idx_on = t > t_on(1) & t <= t_on(2);
      % Verifying cell modulation type and find onset timing
        if k > 0        % for facilitation
            id_on = find(freq(idx_on) > stat.th_h,1);
            if isempty(id_on)
                cell_mod(i).type = 'NOM';
                cell_mod(i).onset = [];
            else
                cell_mod(i).type = 'FAC';
                temp = t(idx_on);
                cell_mod(i).onset = temp(id_on) * 1000;
            end
        elseif k < 0    % for supression
            id_on = find(freq(idx_on) < stat.th_l,1);
            if isempty(id_on)
                cell_mod(i).type = 'NOM';
                cell_mod(i).onset = [];
            else
                cell_mod(i).type = 'SUP';
                temp = t(idx_on);
                cell_mod(i).onset = temp(id_on) * 1000;
            end
        else            % for extermely rare case, k = 0
            if mean(freq(idx_mod)) > stat.th_h
                cell_mod(i).type = 'FAC';
                id_on = find(freq(idx_on) > stat.th_h,1);
                temp = t(idx_on);
                cell_mod(i).onset = temp(id_on) * 1000;
            elseif mean(freq(idx_mod)) < stat.th_l
                cell_mod(i).type = 'SUP';
                id_on = find(freq(idx_on) < stat.th_l,1);
                temp = t(idx_on);
                cell_mod(i).onset = temp(id_on) * 1000;
            else
                cell_mod(i).type = 'NOM';
                cell_mod(i).onset = [];
            end
        end
    end
else
   cell_mod.cell = [];
   cell_mod.stat = [];
   cell_mod.k = [];
   cell_mod.type = [];
   cell_mod.onset = []; 
end
end